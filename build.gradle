buildscript {
    repositories {
        jcenter()
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "Sonatype"
            url = 'https://oss.sonatype.org/content/groups/public'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.2.0'
    }
}

apply plugin: 'forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

//apply from: 'https://gist.githubusercontent.com/UpcraftLP/0a98a7dfe913bd3e99073efa7ad0353b/raw'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
import java.time.Year


ext.gitHash = getGitHash()
def getGitHash() {
    def process = 'git rev-parse --short HEAD'.execute()
    process.waitFor()
    return '-' + (process.exitValue() ? 'unknown' : process.text.trim())
}

ext.buildName = ("release".equals(project.release_type) ? "" : ("-" + "${project.release_type}-" + getDate()))
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

ext.changeLog = getChangelogText()
String getChangelogText() {
    def changelogFile = new File(project.projectDir, "changelog.md")
    String str = ''
    if(!changelogFile.exists()) {
        System.out.println("No changelog file found, creating one at \"" + changelogFile.getAbsolutePath() + "\"")
        changelogFile.createNewFile()
        makeNewChangelog(changelogFile)
        return str
    }
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {
                return ""
            }
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    str += "\n\n see full changelog [here](${project.changelog_url} \"Changelog\")"
    return str
}

//Populate a new blank changelog for the next version
def makeNewChangelog(File changelogFile) {
    String newText = '------------------------------------------------------\n' +
            'Version '+ ext.buildName + '\n' +
            '------------------------------------------------------\n' +
            'Additions\n' +
            '- None\n' +
            '\n' +
            'Changes\n' +
            '- None\n' +
            '\n' +
            'Bug Fixes\n' +
            '- None\n'
    String oldText = changelogFile.getText()
    changelogFile.setText(newText + oldText);
}
ext.mappings = project.forge_mappings

def username = "${modid}"
if (project.hasProperty('dev_mail')) {
    username = "${dev_mail}"
}
else if(project.hasProperty('dev_username')) {
    username = "${dev_username}"
}

def buildVersion = project.mod_version + ext.buildName
version = "${project.mc_version}-" + buildVersion
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//noinspection GroovyUnusedAssignment
archivesBaseName = project.modid
tasks.build.doFirst { println("Current version is ${modid}-${version}") }

sourceCompatibility = targetCompatibility = project.jvm_version // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = project.jvm_version
}

repositories {
    maven {
        //JEI files
        //Mantle
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "http://modmaven.k-4u.nl"
    }

    maven {
        //fallback for almost everything, this is CurseForge :P
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }

    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

minecraft {
    version = "${project.mc_version}-${project.forge_version}-${project.mc_version}"
    if(project.hasProperty('runDir')) {
        runDir = project.runDir
    }
    else if(file('../run').exists()) {
		runDir = "../run"
	}
	else
	{
		runDir = "run"
	}
    
    mappings = project.forge_mappings

	replace "@VERSION@", project.mod_version
    def fingerPrintKey = project.hasProperty('public_key') ? findProperty('public_key').replace(":", "").toLowerCase(Locale.ROOT) : "undefined"
    replace "@FINGERPRINTKEY@", fingerPrintKey
    replace "@UPDATE_JSON@", project.update_json
    replaceIn project.reference_class
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    from ("LICENSE") {
        include "*"
    }
    manifest.mainAttributes(
            "Built-On-Java": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name + '-javadoc',
            "Implementation-Version": project.version,
            "Maven-Artifact":"${project.group}:${project.archivesBaseName}:${project.version}:javadoc",
            "Built-On": "${mc_version}-${forge_version}"
    )
    classifier = 'javadoc'
}

jar {
    from sourceSets.api.output
    from "LICENSE"
    manifest.mainAttributes(
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Built-On": "${project.mc_version}-${project.forge_version}"
            //"FMLAT": "${project.modid}_at.cfg"
    )
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

dependencies {
    //none
}
tasks.build.dependsOn publish
tasks.curseforge.dependsOn build

artifacts {
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact javadocJar
        }
    }

    repositories {
        mavenLocal()
    }
}

def curseRelations = {
    //requiredLibrary '' //add curseforge-slug here
}

curseforge {
    if (project.hasProperty('curse_key'))
        apiKey = project.curse_key

    if(project.hasProperty('curse_id')) {
        project {
            id = project.curse_id
            changelogType = 'markdown'
            changelog = "${project.ext.changeLog}"
            releaseType = project.release_type

            //relations curseRelations

            addArtifact javadocJar
            //addArtifact sourceJar
            //addArtifact apiJar

            addGameVersion '1.7.10'

            mainArtifact(jar) {
                displayName = "${project.mod_name} v${project.mod_version} MC${project.mc_version}"
            }
        }
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'modid':project.modid, 'name':project.mod_name, 'description':project.mod_description, 'version':project.mod_version, 'mcversion':project.minecraft.version, 'url':project.url, 'updateUrl':project.update_json, 'year':String.valueOf(Year.now().getValue())
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	
	//ATs
	rename '(.+_at.cfg)', 'META-INF/$1'
}
